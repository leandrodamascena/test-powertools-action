name: Deploy CDK Layer v2 stack

# PROCESS
#
# 1. Split what AWS regions support ARM vs regions that Lambda support ARM
# 2. Deploy previously built layer for each AWS commercial region
# 3. Export all published Layers as JSON
# 4. Deploy Canaries to every deployed region to test whether Powertools can be imported etc.

# USAGE
#
# NOTE: meant to be used with ./.github/workflows/publish_v2_layer.yml
#
# beta:
#   needs: build-layer
#   # lower privilege propagated from parent workflow (release.yml)
#   permissions:
#     id-token: write
#     contents: read
#     pages: write             # docs will be updated with latest Layer ARNs
#     pull-requests: write     # creation-action will create a PR with Layer ARN updates
#   uses: ./.github/workflows/reusable_deploy_v2_layer_stack.yml
#   secrets: inherit
#   with:
#     stage: "BETA"
#     artefact-name: "cdk-layer-artefact"
#     environment: "layer-beta"
#     latest_published_version: ${{ inputs.latest_published_version }}

on:
  workflow_call:
    inputs:
      stage:
        description: "Deployment stage (BETA, PROD)"
        required: true
        type: string
      artefact-name:
        description: "CDK Layer Artefact name to download"
        required: true
        type: string
      environment:
        description: "GitHub Environment to use for encrypted secrets"
        required: true
        type: string
      latest_published_version:
        description: "Latest version that is published"
        required: true
        type: string
      source_code_artifact_name:
        description: "Artifact name to restore sealed source code"
        type: string
        required: true
      source_code_integrity_hash:
        description: "Sealed source code integrity hash"
        type: string
        required: true

permissions:
  contents: read

env:
  RELEASE_COMMIT: ${{ github.sha }}  # it gets propagated from the caller for security reasons

jobs:
  deploy-cdk-stack:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    # lower privilege propagated from parent workflow (publish_v2_layer.yml)
    permissions:
      id-token: write
      pull-requests: none
      contents: read
      pages: none
    defaults:
      run:
        working-directory: ./layer
    strategy:
      fail-fast: false
      matrix:
        # To get a list of current regions, use:
        # aws ec2 describe-regions --all-regions --query "Regions[].RegionName" --output text | tr "\t" "\n" | sort
        region: ["us-east-1","us-east-2","us-west-1","us-west-2"]
        #python-version: ["3.8","3.9","3.10","3.11","3.12"]
        #region: ["us-east-1", ]
        python-version: ["3.8"]
        include:
            - region: "us-east-1"
              has_arm64_support: "true"
            - region: "us-east-2"
              has_arm64_support: "true"
            - region: "us-west-1"
              has_arm64_support: "true"
            - region: "us-west-2"
              has_arm64_support: "true"

    steps:
      - name: checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7
        with:
          ref: ${{ env.RELEASE_COMMIT }}

      - name: Install poetry
        run: pipx install git+https://github.com/python-poetry/poetry@68b88e5390720a3dd84f02940ec5200bfce39ac6 # v1.5.0
      - name: aws credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v2.2.0
        with:
          aws-region: ${{ matrix.region }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: "18.20.4"
      - name: Setup python
        uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f # v5.1.1
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - name: Resolve and install project dependencies
        # CDK spawns system python when compiling stack
        # therefore it ignores both activated virtual env and cached interpreter by GH
        run: |
          poetry export --format requirements.txt --output requirements.txt
          pip install --require-hashes -r requirements.txt
      - name: install cdk and deps
        working-directory: ./
        run: |
          npm ci
          npx cdk --version
      - name: install deps
        run: poetry install
      - name: Download artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: cdk-layer-artifact-py${{ matrix.python-version }}
          path: layer
      - name: unzip artefact
        run: unzip cdk.py${{ matrix.python-version }}.out.zip
      - name: Define constants
        id: constants
        run: |
          PYTHON_VERSION=$(echo ${{ matrix.python-version }} | tr -d '.')
          LAYER_VERSION=$(echo ${{ matrix.region }}-$PYTHON_VERSION-layer-version.txt)
          echo "PYTHON_VERSION=${PYTHON_VERSION}" >> $GITHUB_OUTPUT
          echo "LAYER_VERSION=${LAYER_VERSION}" >> $GITHUB_OUTPUT
      - name: CDK Deploy Layer
        run:  |
          npx cdk deploy --app cdk.out --context region=${{ matrix.region }} --parameters HasARM64Support=${{ matrix.has_arm64_support }} "LayerV3Stack-python${{steps.constants.outputs.PYTHON_VERSION}}" --require-approval never --verbose --outputs-file cdk-outputs.json
          cat cdk-outputs.json
      - name: Store latest Layer ARN
        if: ${{ inputs.stage == 'BETA' }}
        run: |
          mkdir cdk-layer-stack
          jq -r -c ".[\"LayerV3Stack-python${{steps.constants.outputs.PYTHON_VERSION}}\"].LatestLayerArn" cdk-outputs.json > cdk-layer-stack/${{steps.constants.outputs.LAYER_VERSION}}
          jq -r -c ".[\"LayerV3Stack-python${{steps.constants.outputs.PYTHON_VERSION}}\"].LatestLayerArm64Arn" cdk-outputs.json >> cdk-layer-stack/${{steps.constants.outputs.LAYER_VERSION}}
          cat cdk-layer-stack/${{steps.constants.outputs.LAYER_VERSION}}
      - name: Save Layer ARN artifact
        if: ${{ inputs.stage == 'BETA' }}
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: cdk-layer-stack-${{ matrix.region }}-${{ matrix.python-version }}
          path: ./layer/cdk-layer-stack/* # NOTE: upload-artifact does not inherit working-directory setting.
          if-no-files-found: error
          retention-days: 1
      - name: CDK Deploy Canary
        run: npx cdk deploy --app cdk.out --context region=${{ matrix.region }} --parameters DeployStage="${{ inputs.stage }}" --parameters HasARM64Support=${{ matrix.has_arm64_support }} "CanaryV3Stack-python${{steps.constants.outputs.PYTHON_VERSION}}" --require-approval never --verbose
